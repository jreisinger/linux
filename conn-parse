#!/usr/bin/perl
# Parses conntrackd logs for suspuciously high number of connections.
# Usage: zcat logs/conntrackd-stats.log.1.gz | head -10000 | ./conn-parse
use strict;
use warnings;
use Socket;
use Time::Local;

#use Regexp::Debugger;

die "Usage: $0 /var/log/conntrackd-stats.log" unless defined $ARGV[0];

my $max_ports = 100;      # number of ports an IP has connected to
my $max_conns = 10000;    # number of connections to a port
my %conn;
my $earliest = time;
my $latest   = 0;
my %lines_n;

my %mon2num = qw(
  jan 1  feb 2  mar 3  apr 4  may 5  jun 6
  jul 7  aug 8  sep 9  oct 10 nov 11 dec 12
);

while (<>) {

    $lines_n{total}++;

    chomp;

    if (

        m/
        ^\w{3}\s(?<MON>\w{3})\s(?<MDAY>\d{2})                           # Mon Nov 18
        \s
        (?<HOURS>\d\d):(?<MIN>\d\d):(?<SEC>\d\d)\s(?<YEAR>\d{4})        # 06:25:02 2013
        \s+
        tcp                                                             # tcp
        \s+
        \d+                                                             # 6
        \s
        src=(?<SRC>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})                  # src=10.15.15.54
        \s
        dst=\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}                          # dst=173.252.103.16
        \s
        sport=\d{1,5}                                                   # sport=53932
        \s
        dport=(?<DPORT>\d{1,5})                                         # dport=443
        /x

      )
    {
        $lines_n{matched}++;

        # Get the log timespan
        my $month = $mon2num{ lc $+{MON} };
        my $epoch =
          timelocal( $+{SEC}, $+{MIN}, $+{HOURS}, $+{MDAY}, $+{MON}, $+{YEAR} );
        $earliest = $epoch if $epoch < $earliest;
        $latest   = $epoch if $epoch > $latest;

        $conn{ $+{SRC} }{ $+{DPORT} }++;
    }

}

# Print general header
my $days = sprintf "%.2f", ( $latest - $earliest ) / 3600 / 24;
print 'Logs timespan: '
  . localtime($earliest) . ' -- '
  . localtime($latest)
  . " ($days days)\n";
print "Matched $lines_n{matched} out of $lines_n{total} lines\n";

# Print IPs connecting to too many different ports
for my $ip (
    sort { scalar( keys %{ $conn{$b} } ) <=> scalar( keys %{ $conn{$a} } ) }
    keys %conn
  )
{
    my $ports_connected = keys $conn{$ip};
    if ( $ports_connected > $max_ports ) {
        printf "%-15s connected to %5d different ports\n", $ip,
          $ports_connected;
    }
}

# Print IPs connecting too many times to a single port (ex. sending spam, port 25)
# (FIXME: should be sorted -- see Perl Cookbook 4.16)
for my $ip ( keys %conn ) {
    for my $port ( keys $conn{$ip} ) {
        if ( $conn{$ip}{$port} > $max_conns ) {
            printf "%-15s connected to TCP port %5d %9d times\n", $ip, $port,
              $conn{$ip}{$port};
        }
    }
}

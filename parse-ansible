#!/usr/bin/perl
#
# Parse output of ansible command. See __DATA__ section below for ansible
# output format. Sample usage:
#
#     ansible -m apt -a update_cache=yes all | ./parse-ansible > /tmp/out
#
use strict;
use warnings;

local $/ = "}\n";

my %hosts;

while (<>) {
    if (/(\S+)\s*\|\s*(\S+)/) {
        my $host   = $1;
        my $status = $2;
        $hosts{$host}{status} = $status;
        $hosts{$host}{msg} = $1 if /"msg":\s*"([^"]+)"/;
        warn "Parsed output for $host ($status)\n";
    } else {
        warn "No match!";
    }
}

my %statuses;
for my $host ( keys %hosts ) {
    $statuses{ $hosts{$host}{status} }++;
}

for my $status ( sort keys %statuses ) {
    print "$status: $statuses{$status}\n";
}

for my $status ( sort keys %statuses ) {
    print "$status\n";
    for my $host ( keys %hosts ) {
        next unless $hosts{$host}{status} eq $status;
        my $out = do {
            if ( $status eq "SUCCESS" ) {
                $host;
            } else {
                my $msg = $hosts{$host}{msg};
                $msg =~ s/\n//g;
                "$host ($msg)";
            }
        };
        print "$out\n";
    }
}

__DATA__
host1.example.com | SUCCESS => {
    "cache_update_time": 1462884269,
    "cache_updated": true,
    "changed": false
}
host2.example.com | UNREACHABLE! => {
    "changed": false,
    "msg": "SSH Error: data could not be sent to the remote host. Make sure
this host can be reached over ssh",
    "unreachable": true
}
